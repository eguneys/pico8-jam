pico-8 cartridge // http://www.pico-8.com
version 33
__lua__
 
dbg = ""
function _init()

 freeze = 0
 score = {
  x = 0,
  y = 0,
  negy = 0,
  iy = 0
 }

 isfx_delay = 0
 sfx_delay = 0

 player = {
  x = 64,
  y = 64,
  t_dashgrace=0,
  t_dash=0,
  itheta=0,
  daccel=0,
  theta=0,
  knock = false,
  t_stun = 0
 }

 homings = {}

 lines = {}

 shards = {}

 foods = {}
end


-- {{{ 

-- dx, dy
ATTACKS = {
 { 0, 3 },
 { 0, 8 },
 { 4, 8 },
 { 4, 8 },
 { 8, 8 },
 { 8, 8 },
 { 8, 4 },
 { 8, 0 },
 { 4, 0 },
 { 4, 0 },
 { 0, 0 },
 { 0, 0 },
 { 0, 0 },
}

-- spr, flipx, flipy
-- 0 - 1 / 8
FLIPS = {
 { 2, true, true },
 { 3, true, true },
 { 1, true, true },
 { 1, false, true },
 { 3, false, true },
 { 2, false, true },
 { 2, false, false },
 { 3, false, false },
 { 1, false, false },
 { 1, true, false },
 { 3, true, false },
 { 2, true, false },
}



function update_player_knock()

 player.t_stun = appr(player.t_stun, 0, 1)

 if player.t_stun > 0 then
  player.daccel = appr(player.daccel, 0, 1)
  return
 end

 if player.t_dash > 0 then return end
 if not player.knock then return end

 player.knock = false


 player.t_stun = 6 
 player.theta += 0.5
 player.daccel = 4 


end

function update_player()


 local idash = 0
 if btn(5) then
  idash = 1
 end

 local ix, iy = 0, 0
 if btn(0) then
  ix = -1
 end
 if btn(1) then
  ix = 1
 end
 if btn(2) then
  iy = -1
 end
 if btn(3) then
  iy = 1
 end

 if player.t_stun > 0 then
  ix = 0
  iy = 0
 end

 local intheta = atan2(-ix, -iy)
 local diftheta = angle_diff(player.theta, intheta)
 local absdiftheta = abs(diftheta)


 player.t_dashgrace = appr(player.t_dashgrace, 10 * idash, 1) 


 if player.t_dash == 0 then
  if player.t_dashgrace > 0 then
   player.t_dashgrace = 0
   player.t_dash = 10
   asfx(rnd() < 0.5 and 1 or 3)
  end
 end

 player.t_dash = appr(player.t_dash, 0, 1)


 if player.t_dash > 7 then
  player.daccel = appr(player.daccel, 50, 5 * (player.t_dash / 10))
 elseif player.t_dash > 0 then
  player.daccel = appr(player.daccel, 1, 1)
 end

 if ix ~= 0 or iy ~= 0 then
  player.theta = appra(player.theta, intheta, 0.08)

  if absdiftheta < 0.25 then

   player.daccel = appr(player.daccel, 4.0 - absdiftheta * 20, 0.1 + 0.1 - 0.1 * absdiftheta)
  else
   player.daccel = appr(player.daccel, 3 * (1 - absdiftheta), absdiftheta * 3)
  end
 else
  player.daccel = appr(player.daccel, 0, 0.2)
 end

 player.theta %= 1
 player.itheta = flr((player.theta) * 12)

 px = -cos(player.theta)
 py = -sin(player.theta)


 player.x += px * player.daccel
 player.y += py * player.daccel


 if player.x < -4 then
  player.x = -4
  player.daccel = 0
 end
 if player.x > 124 then
  player.x = 124
  player.daccel = 0
 end
 if player.y < -4 then
  player.y = -4
  player.daccel = 0
 end
 if player.y > 124 then
  player.y = 124
  player.daccel = 0
 end


 player.hit = v_new(player.x + ATTACKS[player.itheta + 1][1],
 player.y + ATTACKS[player.itheta + 1][2])



 local ixy = v_scale(v_new(
 cos(player.theta), sin(player.theta)), 8)

 player.hit2 = v_sub(player.hit, ixy)
 player.hit = v_add(player.hit, ixy)

end

function draw_player()

 if player.t_stun % 3 == 1 then
  return
 end

 local flips = FLIPS[player.itheta + 1]

 pal(12, 0)
 spr(flips[1], player.x + 1, player.y + 1, 1, 1, flips[2], flips[3])
 pal()
 spr(flips[1], player.x, player.y, 1, 1, flips[2], flips[3])


 --line(player.hit.x, player.hit.y, player.hit2.x, player.hit2.y, 7)
end

function add_homing(x, y)
 if #homings > 8 then
  return
 end
 local dist = rnd(homings)
 local hom = {
  x = x,
  y = y,
  t=0,
  ref=0,
  atimer=0,
  dist=dist,
  theta=sin(rnd(1)) * 0.1,
  daccel=0
 }

 add(homings, hom)
end

function add_line()

 if #homings < 2 or #lines > 5 then
  return
 end

 local p1, p2 = homings[1 + flr(rnd(#homings - 2))],
 homings[#homings -1]


 if p1 == p2 then
  -- TODO special
  return
 end

 p1.ref += 1
 p2.ref += 1

 local li = {
  p1 = p1,
  p2 = p2,
  t=0,
  life=200+rnd(100),
  good=rnd()<0.8
 }

 add(lines, li)

end

function update_line(li)

 li.t += 1


 if li.t > li.life then
  del_line(li)
 end

 if player.t_dash > 0 then
  if line_line(li.p1, li.p2, player.hit, player.hit2) then
   del_line(li)
   add_shard(li, 0.5)
   add_shard(li, 1)
   add_food(li)
   if li.good then
    isfx(2)
   else
    isfx(7)
    isfx_delay = 10
   end
   freeze = 3
   add_score(li.good)
   return
  end
 end
end

function del_line(li)
 del(lines, li)
 li.p1.ref -= 1
 li.p2.ref -= 1
 if li.p1.ref == 0 then
  li.p1.ref -= 1
 end
 if li.p2.ref == 0 then
  li.p2.ref -= 1
 end
end

function draw_line(li)
 local col = li.good and 7 or 8
 line(li.p1.x, li.p1.y, li.p2.x, li.p2.y, col)
end

function update_homing(homing)

 homing.t += 1
 homing.daccel = appr(homing.daccel, 0.5, 0.02)


 local outside = is_outside(homing)


 if outside or homing.ref < 0 then
  del(homings, homing)
  homing.ref = -10
 end

 local active = (homing.t % 300) < 100
 local mult = active and 2 or 1
 
 if player.t_dash > 0 then
  if homing.atimer == 0 then
   homing.atimer = 10 + rnd(10) + rnd(26)  + rnd(20)
  end
 end

 homing.atimer = appr(homing.atimer, 0, 1)

 if homing.atimer > 0 then
  mult *= 2
 end

 local vtarget = active and v_new(player.x, player.y) or v_new(200, 200)
 local targettheta = -v_angle(vtarget, v_new(homing.x, homing.y))

 homing.theta = appra(homing.theta, targettheta, 0.01 * mult)
 local thetadiff = homing.theta - targettheta

 homing.daccel = appr(homing.daccel, player.daccel, (1-thetadiff)*0.04)

 local px, py = -cos(homing.theta) * mult,
 sin(homing.theta) * mult

 homing.x = appr(homing.x, homing.x + px, homing.daccel * mult)
 homing.y = appr(homing.y, homing.y + py, homing.daccel * mult)

 if homing.dist ~= nil and homing.dist.ref > 0 then

  local vp = v_normal(v_sub(homing, homing.dist))

 homing.x = appr(homing.x, homing.x + vp.x, homing.daccel * mult * 0.5)
 homing.y = appr(homing.y, homing.y + vp.y, homing.daccel * mult * 0.5)


 end

 for h2 in all(homings) do
  if h2 ~= homing then
   if v_distance(h2, homing) < 4 then

    if (h2.ref <= 0) then
     del(homings, h2)
     break
    end
    if (homing.ref <= 0) then
     del(homings, homing)
     break
    end

    homing.daccel *= 3
    homing.theta += 0.5
   end
  end
 end
end

function draw_homing(homing)

 circfill(homing.x, homing.y, 1, 0)

 local vx, vy = cos(homing.theta), sin(homing.theta)

 line(homing.x, homing.y, homing.x + vx * 4, homing.y + vy * 4, 0)

end

function add_shard(li, mult)

 local m = v_m(li.p1, li.p2)
 local l = v_distance(li.p1, li.p2)

 local split = l / 3
 local lshard = rnd(split)
 l = l - lshard
 local p_0 = li.p1
 local p_1 = v_point_atdistance(p_0, li.p2, lshard)
 for i=1,20 do
  lshard = rnd(split - rnd(split))
  l = l - lshard
  p_0 = p_1
  p_1 = v_point_atdistance(p_0, li.p2, lshard)

  if l < 0 then
   break
  end
  local thetaoff = i < 10 and (10 - i) or (i - 10)
  local theta = player.theta + rnd(thetaoff / 10)*0.25


  local vmid = v_mid(p_0, p_1)
  local _thetaoff2 = rnd(thetaoff/10 * 0.4) - rnd(thetaoff/10 * 0.2)

  local sh = {
   p1=v_rotatea(p_0, _thetaoff2, vmid),
   p2=v_rotatea(p_1, _thetaoff2, vmid),
   theta=theta,
   thetaoff=rnd(thetaoff / 10),
   vd=v_new(-cos(theta), -sin(theta)),
   daccel=rnd((1-(thetaoff/10))* 2) * 2 * mult * player.daccel * 2 - (lshard / l) * player.daccel * 0.2,
   ddaccel=2+rnd(1-thetaoff/10) * 1,
   good=li.good
  }
  add(shards, sh)
 end
end

function update_shard(sh)

 sh.ddaccel = appr(sh.ddaccel, 0.1, 0.1)
 sh.daccel = appr(sh.daccel, -15, sh.ddaccel)
 if sh.daccel > 0 then
  sh.p1 = v_add(sh.p1, v_scale(sh.vd, sh.daccel))
  sh.p2 = v_add(sh.p2, v_scale(sh.vd, sh.daccel))
 end

 if sh.daccel < 0 then
  sh.thetaoff = appr(sh.thetaoff, 0, 0.01)
 end

 if sh.daccel <= -15 then
  del(shards, sh)
 end
end

function draw_shard(sh)
 local col = sh.daccel <= 0 and sh.thetaoff < 0.2 and 6 or 7

 if not sh.good then
  col = col == 6 and 2 or 8 
 end
 line(sh.p1.x, sh.p1.y, sh.p2.x, sh.p2.y, col)
end


function isfx(v, chan)
 if isfx_delay == 0 then
  sfx(v, chan)
  sfx_delay = 15
 end
end

function asfx(v, delay)
 delay = delay or 0
 if sfx_delay == 0 then
  sfx(v)
  sfx_delay = 15 + delay
 end
end

function update_sfx()
 sfx_delay = appr(sfx_delay, 0, 1)
 isfx_delay = appr(isfx_delay, 0, 1)
end

function add_score(good)
 if good then
  score.y += 1
 else
  score.negy += 1
 end
 if score.y > 1 then
  isfx(5, 2)
 end
 if score.y > 3 then
  isfx(6, 3)
 end
end

function update_score()

 if score.iy == 0 and score.y > 0 then
  score.iy = 20 
 end

 if score.iy == 0 and score.negy > 0 then
  score.iy = 20
 end

 local iy = score.iy
 score.iy = appr(score.iy, 0, 1)

 if iy ~= score.iy and score.iy == 0 then
  score.x += 5 * score.y
  score.x -= 5 * score.negy
  score.y = 0
  score.negy = 0
 end

 score.is = 20-flr((score.iy / 20) * 20)

end


function draw_score()

 local s = score.negy > 0 and 32 or 0
 local is = (score.is >= 10 and 5 or flr(score.is / 2)) - 1
 if score.iy > 0 then
  spr(65 + is + s, 60, 50)
  spr(81 + is + s, 68, 50)
 end


 if score.iy > 15 then
  local t = (score.iy - 15) / 3
  rectfill(0, 50 + 4 * t, 128, 50 + 8 * t, 0)
 end


 rectfill(0, 0, 128, 6, 12)
 print(score.x, 64, 1, 7)

 if score.iy > 0 and score.iy < 5 then
  local t = score.iy / 5 
  rectfill(t * 128, 0, 20 + t * 10, 6, 7)
 end
 

end

-->8
--  }}}





-- {{{ junk
function add_food(li)

 local vdir = v_normal(v_sub(li.p2, li.p1))
 local l = v_distance(li.p1, li.p2)
 local nb = (1-(l/128))*2 

 if nb < 2 and rnd() < 0.2 then
  nb += flr(rnd(2))
 end

 if not li.good then
  nb += 1
 end

 for i = 1,nb do
  if rnd() < 0.5 then
   break
  end
  local v_food = v_add(li.p1, v_scale(vdir, i * (l/nb)))

 local fo = { 
  x = v_food.x,
  y = v_food.y,
  theta= (player.theta + (i/nb) * 0.2 + rnd(0.1)) % 1,
  daccel=10,
  t=0,
  is=0,
  good=li.good
 }
 dbg = fo.theta

 add(foods, fo)
 end

end

function update_food(fo)

 fo.t += 1
 fo.daccel = appr(fo.daccel, 0, 1)

 local pdist = fo.good and 40 or 20
 if fo.t > 30 and v_distance(fo, player) < pdist then
  local t = (1.0 - v_distance(fo, player) / pdist) 
  fo.x = appr(fo.x, player.x, t * 6)

  fo.y = appr(fo.y, player.y, t * 6)
 end

 if fo.t < 100 and fo.t > 30 and v_distance(fo, player) < 8 then
  fo.t = 100
 end

 fo.x = appr(fo.x, fo.x + cos(fo.theta) * 4, fo.daccel)
 fo.y = appr(fo.y, fo.y + sin(fo.theta) * 4, fo.daccel)

 fo.is = ((fo.t % 30) / 30) * 4

 if fo.t > 110 then
  fo.t += 1
 end
 if fo.t == 100 then
  if fo.good then
   isfx(8)
  else
   isfx(9)
   isfx_delay = 6
  end
 end
 if fo.t > 120 then
  del(foods, fo)
 end

end

function draw_food(fo)

 if fo.t > 100 and fo.t < 110 and fo.t % 3 == 1 then
  return
 end

 if fo.t < 110 then
  local s = fo.good and 34 or 50
  if not fo.good then
   pal(7, 0)
  end
  --circfill(fo.x, fo.y, 2, 0)
  spr(s, fo.x, fo.y + sin(fo.is % 4 * 0.2 + (fo.x / 128) * 0.2)* 2)

  pal()
 end


 if fo.t > 110 then
  local t = 1-((fo.t - 110) / 10)
  rectfill(fo.x, fo.y + t * 4, fo.x + 8, fo.y + t * 8, 7)
 end
end

-- }}}

function _update()


 freeze = appr(freeze, 0, 1)

 update_sfx()

 if freeze ~= 0 then
  return
 end

 update_score()

 if rnd() < 0.02 then
  add_homing(0, 0)
 elseif rnd() < 0.05 then
  add_homing(0, rnd(128))
 end

 if rnd() < 0.1 then
  add_line()
 end

 update_player_knock()
 update_player()

 for hom in all(homings) do
  update_homing(hom)
 end

 for li in all(lines) do
  update_line(li)
 end

 for sh in all(shards) do
  update_shard(sh)
 end

 for fo in all(foods) do
  update_food(fo)
 end

end


function _draw()
 cls()

 rectfill(0, 0, 128, 128, 9)

 draw_score()

 for fo in all(foods) do
  draw_food(fo)
 end

 draw_player()

 for edge in all(edges) do
  draw_edge(edge)
 end

 for hom in all(homings) do
  draw_homing(hom)
 end

 for li in all(lines) do
  if li.good then
   draw_line(li)
  end
 end

 for li in all(lines) do
  if not li.good then
   draw_line(li)
  end
 end


 for sh in all(shards) do
  draw_shard(sh)
 end


 print(dbg, 0)

end

-->8

function is_outside(value)
 return not (is_between(value.x, -10, 138)and 
 is_between(value.y, -10, 138))
end

function is_between(value, _min, _max)
 return value >= _min and value < _max
end

function appr(value, target, by)
 return (value < target) and min(target, value + by) or max(target, value - by)
end

-- https://gamedev.stackexchange.com/a/197698/41229
function wrap_value(value, from, to)
  local range = to - from
  return value - (range * flr((value - from) / range))
end

function angle_diff(from, to)
  return wrap_value(to - from, -0.5, 0.5)
end

function appra(value, target, by)
  local diff = angle_diff(value, target)
  local sign = (diff > 0 and 1 or -1)
  local offset = min(abs(by), abs(diff)) * sign
  return wrap_value(value + offset, 0, 1)
end

function line_line(l1, l2, c1, c2)

 local x1, x2, x3, x4 = l1.x, l2.x, c1.x, c2.x
 local y1, y2, y3, y4 = l1.y, l2.y, c1.y, c2.y

 local tover = (x1 - x3)*(y3-y4)-(y1-y3)*(x3-x4)

 local tunder = (x1 - x2)*(y3-y4) - (y1-y2)*(x3-x4)

 local t = tover/tunder

 local uover = (x1 - x3)*(y1-y2)-(y1-y3)*(x1-x2)

 local uunder = (x1 - x2)*(y3-y4) - (y1-y2)*(x3-x4)

 local u = uover/uunder

 return t >= 0 and t <= 1.0 and u >= 0 and u <= 1.0


end

function v_appr(v1, v2, by)
 return v_new(appr(v1.x, v2.x, by),
 appr(v1.y, v2.y, by))
end

-->8
function v_new(x, y)
 return { x=x, y=y }
end

function v_length(v)
 return sqrt(v.x * v.x + v.y * v.y)
end

function v_scale(v, k)
 return v_new(v.x * k, v.y * k)
end

function v_normal(v)
 return v_scale(v, 1/v_length(v))
end

function v_add(v1, v2)
 return v_new(v1.x + v2.x,
 v1.y + v2.y)
end

function v_sub(v1, v2)
  return v_new(v1.x - v2.x,
  v1.y - v2.y)
end

function v_mid(v1, v2)
 return v_scale(v_add(v1, v2), 1/2)
end

function v_distance(v1, v2)
 local dx, dy = v1.x - v2.x,
 v1.y - v2.y
 return sqrt(dx * dx + dy * dy)
end


function v_rotate(v1, angle)
 return v_new(
 cos(angle) * v1.x - sin(angle) * v1.y,
 sin(angle) * v1.x + cos(angle) * v1.y)
end

function v_rotatea(v1, angle, vo)
 return v_add(
 v_rotate(v_sub(v1, vo), angle),
 vo)
end

function v_mod(v1, mod)
 return v_new(v1.x % mod, v1.y % mod)
end

function v_dot(v1, v2)
 return v1.x * v2.x + v1.y * v2.y
end

function v_angle(va, vb)
 return atan2(vb.x - va.x, vb.y - va.y)
end

function v_m(va, vb)
 return (vb.y - va.y) / (vb.x - va.x)
end


function v_point_atdistance(va, vb, d)
 local u = v_normal(v_sub(vb, va))

 return v_add(va, v_scale(u, d))

end

__gfx__
00000000000cc0000000000000000cc00000000000000000cccccccccccccccccccccccccccccccccccccccccccccccc00000000000000000000000000000000
0000000000cccc000cccc000000ccccc000000000000000000000000cc0000cccc0c00ccccc00cccccccccccccccc00000000000000000000000000000000000
0070070000cc0c00ccccccc00cccc0cc000000000000000000000000c00000c0cc00c0cccc0000cccccccccc0000000000000000000000000000000000000000
000770000cc0ccc0c0cc0cccccc000c0000000000000000000000000000000000c00000cc0000000cccccccc0000000000000000000000000000000000000000
000770000ccc0cc0cc00c0ccccc0ccc00000000000000000000000000000000000000000000000000c0cc0c00000000000000000000000000000000000000000
007007000ccc0cc0ccccccc0cc0ccc00000000000000000000000000000000000000000000000000000cc0000000000000000000000000000000000000000000
000000000cc0ccc00cccc0000ccccc00000000000000000000000000000000000000000000000000000cc0000000000000000000000000000000000000000000
0000000000cccc000000000000ccc0000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000066000000768800000060000076600000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000667600007878880007766000767670000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000677760006888880007666700788770000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000777676008778760006666700868760000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000777766000878870000667600077760000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000777660000086700000066000006700000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000080080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000887788000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000088870000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000078880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000887788000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000080080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000aa000000aa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000a000000aa000000aa000000aa00000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000a00000000a000000aa000000aa000000aa00000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000aaa00000aaaaa0aaaaaaaaaaaaaaaa0aaaaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001a10000011a110aaaaaaaaaaaaaaaa0aaaaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000100000000a000000aa000111aa111000aa00000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000001000000aa000000aa000000aa00000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000aa000000aa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000aaaaaa00aaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000aaaaa00aaaaaa00aaaaaa000aaaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000aaaa0000a000000aa000000aa0000000aa000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000a0000000a000000aaaaaa00aaaaaa000aaaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000aaaa0000aaaaa00aaaaaa00aaaaaa000000aa000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000a00000000a000000aa000000aa000aaaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000aaaa0000aaaaa00aaaaaa00aaaaaa000aaaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000aaaaaa00aaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000008880000088888088888888888888880888888000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001110000011111088888888888888880888888000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000008888880088888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000088888008888880088888800088888000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000008888000080000008800000088000000088000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000008000000080000008888880088888800088888000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000008888000088888008888880088888800000088000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000008000000008000000880000008800088888000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000008888000088888008888880088888800088888000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000008888880088888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__label__
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
888888888888888888888888888888888888888888888888888888888888888888888888888888888882282288882288228882228228888888ff888888228888
888882888888888ff8ff8ff88888888888888888888888888888888888888888888888888888888888228882288822222288822282288888ff8f888888222888
88888288828888888888888888888888888888888888888888888888888888888888888888888888882288822888282282888222888888ff888f888888288888
888882888282888ff8ff8ff888888888888888888888888888888888888888888888888888888888882288822888222222888888222888ff888f888822288888
8888828282828888888888888888888888888888888888888888888888888888888888888888888888228882288882222888822822288888ff8f888222288888
888882828282888ff8ff8ff8888888888888888888888888888888888888888888888888888888888882282288888288288882282228888888ff888222888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555000000000000555555555555555555555555555555555500000000000055000000000000555
555555e555577757575555e555555555555555556656665665555066606660000555555555555555565555665566566655506660666000055066606660100555
55555ee555575757575555ee55555555555555565556565656555060600060000555555555555555565556565656565655506060606000055000606061710555
5555eee555575757775555eee5555555555555566656665656555060600660000555555555555555565556565656566655506060606000055006606061711515
55555ee555575755575555ee55555555555555555656555656555060600060000555555555555555565556565656565555506060606000055000606061717171
555555e555577755575555e555555555555555566556555666555066606660000555555555555555566656655665565555506660666000055066606611777771
55555555555555555555555555555555555555555555555555555000000000000555555555555555555555555555555555500000000000055000000171777771
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555517777771
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555551177715
55555555555555555566666577777566666566666555555588888888566666666566666666566666666566666666566666666566666666566666666555177715
55555665566566655565566575557565556565656555555588877888566666766566666677566777776566667776566766666566766676566677666555d11155
5555656565555655556656657775756665656565655555558878878856667767656666776756676667656666767656767666657676767656677776655d55d555
5555656565555655556656657555756655656555655555558788887856776667656677666756676667656666767657666767657777777756776677655d55d555
55556565655556555566566575777566656566656555555578888887576666667577666667577766677577777677576667767567676767577666677555dd5555
55556655566556555565556575557565556566656555555588888888566666666566666666566666666566666666566666666567666667566666666555555555
55555555555555555566666577777566666566666555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
555555555555555555005005005005005dd500566555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
555565655665655555005005005005005dd5665665555555777777775dddddddd5dddddddd5dddddddd5dddddddd5dddddddd5dddddddd5dddddddd555555555
555565656565655555005005005005005775665665555555777777775d55ddddd5dd5dd5dd5ddd55ddd5ddddd5dd5dd5ddddd5dddddddd5dddddddd555555555
555565656565655555005005005005665775665665555555777777775d555dddd5d55d55dd5dddddddd5dddd55dd5dd55dddd55d5d5d5d5d55dd55d555555555
555566656565655555005005005665665775665665555555777557775dddd555d5dd55d55d5d5d55d5d5ddd555dd5dd555ddd55d5d5d5d5d55dd55d555555555
555556556655666555005005665665665775665665555555777777775ddddd55d5dd5dd5dd5d5d55d5d5dd5555dd5dd5555dd5dddddddd5dddddddd555555555
555555555555555555005665665665665775665665555555777777775dddddddd5dddddddd5dddddddd5dddddddd5dddddddd5dddddddd5dddddddd555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
55507770000066600eee00ccc00ddd005507770000066000eee00ccc00ddd0055000000000000000000000000000005500000000000000000000000000000555
5550707000000060000e0000c0000d00550700000000600000e00c000000d0055000000000000000000000000000005500000000000000000000000000000555
55507700000066600eee000cc0000d00550770000000600000e00ccc0000d0055000000000000000000000000000005500000000000000000000000000000555
55507070000060000e000000c0000d00550700000000600000e0000c0000d0055000000000000000000000000000005500000000000000000000000000000555
55507770000066600eee00ccc0000d00550777000006660000e00ccc0000d0055001000100010000100001000010005500100010001000010000100001000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
55507770000066600eee00ccc00ddd005507770000066000eee00ccc00ddd0055000000000000000000000000000005500000000000000000000000000000555
55507000000000600e0e0000c0000d00550700000000600000e00c000000d0055000000000000000000000000000005500000000000000000000000000000555
55507700000066600e0e000cc0000d00550770000000600000e00ccc0000d0055000000000000000000000000000005500000000000000000000000000000555
55507000000060000e0e0000c0000d00550700000000600000e0000c0000d0055000000000000000000000000000005500000000000000000000000000000555
55507000000066600eee00ccc0000d00550777000006660000e00ccc0000d0055001000100010000100001000010005500100010001000010000100001000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
555001100000111000000000000000005507700707066600eee00ccc00ddd0055000000000000000000000000000005500000000000000000000000000000555
555010000000101000000000000000005507070777000600e0e00c000000d0055000000000000000000000000000005500000000000000000000000000000555
555010000000101000000000000000005507070707006600e0e00ccc0000d0055000000000000000000000000000005500000000000000000000000000000555
555010000000101000000000000000005507070777000600e0e0000c0000d0055000000000000000000000000000005500000000000000000000000000000555
555001100000111000100001000010005507770707066600eee00ccc0000d0055001000100010000100001000010005500100010001000010000100001000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
55507770000066600eee00ccc00d0000550110010101110000000000000000055000000000000000000000000000005500000000000000000000000000000555
55507000000000600e0e0000c00d0000550101011100010000000000000000055000000000000000000000000000005500000000000000000000000000000555
55507700000066600e0e000cc00ddd00550101010100110000000000000000055000000000000000000000000000005500000000000000000000000000000555
55507000000060000e0e0000c00d0d00550101011100010000000000000000055000000000000000000000000000005500000000000000000000000000000555
55507770000066600eee00ccc00ddd00550111010101110001000010000100055001000100010000100001000010005500100010001000010000100001000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550011000001110000000000000000055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550100000000010000000000000000055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550100000000110000000000000000055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550100000000010000000000000000055000000000000000000000000000005500000000000000000000000000000555
55500100010001000010000100001000550011000001110001000010000100055001000100010000100001000010005500100010001000010000100001000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
5550aaaaaaaaaaaaaaaaaaaaaaaaaaa05501111111111111111111111aaaaa055000000000000000000000000000005500000000000000000000000000000555
5550a77a7a7a66aaaeeeaacccaadada05501771111166111eee11ccc1addda055000000000000000000000000000005500000000000000000000000000000555
55507aaa777aa6aaaaaeaacaaaadada05507111111116111e111111c1aaada055000000000000000000000000000005500000000000000000000000000000555
55507aaa7a7aa6aaaeeeaacccaaddda05507111111116111eee111cc1aaada055000000000000000000000000000005500000000000000000000000000000555
55507aaa777aa6aaaeaaaaaacaaaada0550711111111611111e1111c1aaada055000000000000000000000000000005500000000000000000000000000000555
5550a77a7a7a666aaeeeaacccaaaada05501771111166611eee11ccc1aaada055001000100010000100001000010005500100010001000010000100001000555
5550aaaaaaaaaaaaaaaaaaaaaaaaaaa05501111111111111111111111aaaaa055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
555000000000000000000000000000005500770000066000eee00ccc00dd00055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550700000000600000e0000c000d00055000000000000000000000000000005500000000000000000000000000000555
555000000000000000000000000000005507000000006000eee000cc000d00055000000000000000000000000000005500000000000000000000000000000555
555000000000000000000000000000005507000000006000e000000c000d00055000000000000000000000000000005500000000000000000000000000000555
555001000100010000100001000010005500770000066600eee00ccc00ddd0055001000100010000100001000010005500100010001000010000100001000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
555000000000000000000000000000005500770000066000eee00ccc00ddd0055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550700000000600000e0000c0000d0055000000000000000000000000000005500000000000000000000000000000555
555000000000000000000000000000005507000000006000eee000cc0000d0055000000000000000000000000000005500000000000000000000000000000555
555000000000000000000000000000005507000000006000e000000c0000d0055000000000000000000000000000005500000000000000000000000000000555
555001000100010000100001000010005500770000066600eee00ccc0000d0055001000100010000100001000010005500100010001000010000100001000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
55500000000000000000000000000000550000000000000000000000000000055000000000000000000000000000005500000000000000000000000000000555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
5555dd555dd5ddd5ddd555555ddd5d5d5ddd5ddd555555dd55ddd5ddd5d5d5dd55ddd5555ddd5ddd5d5d5ddd5ddd5ddd5555dd55ddd5ddd5ddd5ddd5dd555555
5555d5d5d5d55d5555d555555d5d5d5d555d555d555555d5d5d5555d55d5d5d5d5d555555d5d5d555d5d5d555d5d5d5d5555d5d5d5d5ddd5d5d5d555d5d55555
5555d5d5d5d55d555d5555555dd55d5d55d555d5555555d5d5dd555d55d5d5d5d5dd55555dd55dd55d5d5dd55dd55dd55555d5d5ddd5d5d5ddd5dd55d5d55555
5555d5d5d5d55d55d55555555d5d5d5d5d555d55555555d5d5d5555d55d5d5d5d5d555555d5d5d555ddd5d555d5d5d5d5555d5d5d5d5d5d5d555d555d5d55555
5555d5d5dd55ddd5ddd555555ddd55dd5ddd5ddd555555ddd5ddd55d555dd5d5d5ddd5555d5d5ddd55d55ddd5d5d5ddd5555ddd5d5d5d5d5d555ddd5d5d55555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55551111111111111115555551111111111111115555551111111111111111111111155551111111111111111111111155551111111111111111111111155555
55551dddddd111111115555551dddddd111111115555551dddddd111111111111111155551dddddd111111111111111155551dddddd111111111111111155555
55551dddddd111111115555551dddddd111111115555551dddddd111111111111111155551dddddd111111111111111155551dddddd111111111111111155555
55551dddddd111111115555551dddddd111111115555551dddddd111111111111111155551dddddd111111111111111155551dddddd111111111111111155555
55551111111111111115555551111111111111115555551111111111111111111111155551111111111111111111111155551111111111111111111111155555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888

__sfx__
000100000c0000000000000000001100000000000001500000000000000000018000000000000000000190001a000210002400027000150000f0000b0000a0000600005000020000000000000000000000000000
480200001c6111d6512360111631226011b6011e6311d641196011c6311d00124001000010c0011d0012300100001176511065100601000010000100651026510000106001260010000106001000010000100001
03020000270501a0000905016050220701c0002a05010000220501c050090500f05013050010001e0500000022050080002f050270501d0501a040060500b0500f06000050020100405001000000000000000000
010200000060700627006270c6570060717657006070060700627006271f6270060700607006271762700617006070e6170061700617006171c61700607006171d61700607006070060700607006070060700607
01030000232371a037000001a036270001a254000002700018757187571801027000240001c5550c2360c235000001c0301123110031000001c031270001c2000000000000000000000000000000000000000000
010200001f003150431c05311043100530b0531d053150130b0531b0231b05318043120431b0531a053000431f003080032f00304053040530301303013060030100301003010030100300003030030300300003
0002000000500005002b550005002355000500365500050000500005002f55000500225502b5500050000500005000050000500005000050031550005000050000500005001f550285502b550005002a55032550
010300002f0731907316073200232102312073100731a0730d073150330c0331f0730a0730f0730b023110230e073180731507301073000430004300043000730207301073020730407301043000430004300073
0002000000002150221f05200002220022a002270020000220002200020000222052220520b0220b012000122a002000020000200002000020000200002000020000200002000020000200002000020000200002
0a01000000707007073b7770070728767007073174700707277672475700707007072377700707177770c70700707117670070700707067770070701777017770077700777027770077700707007070070700707
